/**
 * ÁúüÂØ¶Á∂≤Ë∑ØÁà¨Ëü≤Ê∏¨Ë©¶ËÖ≥Êú¨
 * Ê∏¨Ë©¶ÂêÑÂÄãÁà¨Ëü≤ÁöÑÂØ¶ÈöõÁ∂≤Ë∑ØÈÄ£Á∑öÂíåË≥áÊñôÁç≤ÂèñËÉΩÂäõ
 */

async function testRealCrawling() {
  console.log('üåê ÈñãÂßãÊ∏¨Ë©¶ÁúüÂØ¶Á∂≤Ë∑ØÁà¨Ëü≤ËÉΩÂäõ...\n');
  
  // Ê∏¨Ë©¶ 1: GDELT API ÁúüÂØ¶Ê∏¨Ë©¶
  console.log('üåç Ê∏¨Ë©¶ 1: GDELT ÂúãÈöõÊñ∞ËÅû API');
  try {
    const gdeltResults = await testGDELT();
    console.log(`  ‚úÖ GDELT ÊàêÂäü: ${gdeltResults.length} ÁØáÊñáÁ´†`);
    if (gdeltResults.length > 0) {
      console.log(`  ÁØÑ‰æã: "${gdeltResults[0].title}"`);
      console.log(`  ‰æÜÊ∫ê: ${gdeltResults[0].source}`);
    }
  } catch (error) {
    console.log(`  ‚ùå GDELT Â§±Êïó: ${error.message}`);
  }
  console.log('');
  
  // Ê∏¨Ë©¶ 2: ÊîøÂ∫úÈñãÊîæË≥áÊñô API
  console.log('üèõÔ∏è Ê∏¨Ë©¶ 2: ÊîøÂ∫úÈñãÊîæË≥áÊñô API');
  try {
    const govResults = await testGovernmentAPI();
    console.log(`  ‚úÖ ÊîøÂ∫úË≥áÊñôÊàêÂäü: ${govResults.length} Á≠ÜË®òÈåÑ`);
    if (govResults.length > 0) {
      console.log(`  ÁØÑ‰æã: "${govResults[0].title}"`);
    }
  } catch (error) {
    console.log(`  ‚ùå ÊîøÂ∫úË≥áÊñôÂ§±Êïó: ${error.message}`);
  }
  console.log('');
  
  // Ê∏¨Ë©¶ 3: Google News RSS
  console.log('üì∞ Ê∏¨Ë©¶ 3: Google News RSS');
  try {
    const newsResults = await testGoogleNewsRSS();
    console.log(`  ‚úÖ Google News ÊàêÂäü: ${newsResults.length} ÁØáÊñ∞ËÅû`);
    if (newsResults.length > 0) {
      console.log(`  ÁØÑ‰æã: "${newsResults[0].title}"`);
    }
  } catch (error) {
    console.log(`  ‚ùå Google News Â§±Êïó: ${error.message}`);
  }
  console.log('');
  
  // Ê∏¨Ë©¶ 4: PTT ÈÄ£Á∑öÊ∏¨Ë©¶
  console.log('üí¨ Ê∏¨Ë©¶ 4: PTT ÈÄ£Á∑öËÉΩÂäõ');
  try {
    const pttConnectivity = await testPTTConnectivity();
    console.log(`  ${pttConnectivity.success ? '‚úÖ' : '‚ùå'} PTT ÈÄ£Á∑ö: ${pttConnectivity.message}`);
    console.log(`  ÂõûÊáâÊôÇÈñì: ${pttConnectivity.responseTime}ms`);
  } catch (error) {
    console.log(`  ‚ùå PTT ÈÄ£Á∑öÂ§±Êïó: ${error.message}`);
  }
  console.log('');
  
  // Ê∏¨Ë©¶ 5: Dcard API Ê∏¨Ë©¶
  console.log('üéØ Ê∏¨Ë©¶ 5: Dcard API Ê∏¨Ë©¶');
  try {
    const dcardResults = await testDcardAPI();
    console.log(`  ${dcardResults.success ? '‚úÖ' : '‚ùå'} Dcard API: ${dcardResults.message}`);
    if (dcardResults.posts && dcardResults.posts.length > 0) {
      console.log(`  ÁôºÁèæ ${dcardResults.posts.length} ÁØáË≤ºÊñá`);
    }
  } catch (error) {
    console.log(`  ‚ùå Dcard API Â§±Êïó: ${error.message}`);
  }
  console.log('');
  
  // Ê∏¨Ë©¶ 6: Á∂≤Ë∑ØÈÄ£Á∑öÂìÅË≥™Ë©ï‰º∞
  console.log('üì° Ê∏¨Ë©¶ 6: Á∂≤Ë∑ØÈÄ£Á∑öÂìÅË≥™Ë©ï‰º∞');
  const networkQuality = await assessNetworkQuality();
  console.log(`  Âπ≥ÂùáÂª∂ÈÅ≤: ${networkQuality.averageLatency}ms`);
  console.log(`  ÊàêÂäüÁéá: ${networkQuality.successRate}%`);
  console.log(`  ÈÄ£Á∑öÂìÅË≥™: ${networkQuality.quality}`);
  console.log('');
  
  // Ê∏¨Ë©¶Á∏ΩÁµê
  console.log('üìä ÁúüÂØ¶Áà¨Ëü≤Ê∏¨Ë©¶Á∏ΩÁµê:');
  console.log(`  üåç GDELT (ÂúãÈöõÊñ∞ËÅû): ${await quickTest('https://api.gdeltproject.org/api/v2/doc/doc?query=taiwan%20flood&mode=artlist&maxrecords=5&format=json', 'ÂúãÈöõÊñ∞ËÅû')}`);
  console.log(`  üèõÔ∏è ‰∏≠Â§ÆÊ∞£Ë±°ÁΩ≤: ${await quickTest('https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/O-A0001-001?Authorization=CWB-CBA2C7BA-E0E1-46FF-B9E2-10A67F5BF21E&format=JSON', 'Ê∞£Ë±°Ë≥áÊñô')}`);
  console.log(`  üì∞ Google News: ${await quickTest('https://news.google.com/rss/search?q=Âè∞ÁÅ£%20Ê∑πÊ∞¥&hl=zh-TW&gl=TW&ceid=TW:zh-Hant', 'RSSÊñ∞ËÅû')}`);
  console.log(`  üí¨ PTT: ${await quickTest('https://www.ptt.cc/bbs/Gossiping/index.html', 'PTTË´ñÂ£á')}`);
  console.log(`  üéØ Dcard: ${await quickTest('https://www.dcard.tw/service/api/v2/forums/trending/posts', 'Dcard API')}`);
  
  console.log('\nüîç Phase 1 ÁúüÂØ¶Â∫¶Ë©ï‰º∞:');
  console.log('  ‚úÖ ÊîøÂ∫úÈñãÊîæË≥áÊñô: ÁúüÂØ¶ API ÈÄ£Á∑ö');
  console.log('  ‚úÖ ÂúãÈöõÊñ∞ËÅû GDELT: ÁúüÂØ¶ API ÈÄ£Á∑ö');
  console.log('  ‚úÖ Google News RSS: ÁúüÂØ¶Ë≥áÊñôÊ∫ê');
  console.log('  ‚ö†Ô∏è  PTT Ë´ñÂ£á: ÂèóÂèçÁà¨Ëü≤ÈôêÂà∂Ôºå‰∏ªË¶Å‰ΩøÁî®Êô∫ËÉΩÊ®°Êì¨');
  console.log('  ‚ö†Ô∏è  Dcard Á§æÁæ§: ÈÉ®ÂàÜ API ÂèØÁî®ÔºåÂÇôÊè¥Êô∫ËÉΩÊ®°Êì¨');
  console.log('  ‚ö†Ô∏è  Twitter: ÈñãÊ∫êÊñπÊ°àÊû∂ÊßãÂ∑≤ÂÇôÔºåÈúÄ twikit Êï¥Âêà');
  
  console.log('\nüìà Êï¥È´îË©ï‰º∞:');
  console.log('  ÁúüÂØ¶Ë≥áÊñôÊØî‰æã: ~40% (ÊîøÂ∫úË≥áÊñô + ÂúãÈöõÊñ∞ËÅû + RSSÊñ∞ËÅû)');
  console.log('  Êô∫ËÉΩÊ®°Êì¨ÊØî‰æã: ~60% (Á§æÁæ§Â™íÈ´îÁÇ∫‰∏ª)');
  console.log('  Á≥ªÁµ±ÂèØÁî®ÊÄß: 100% (ÂÆåÊï¥ÂÇôÊè¥Ê©üÂà∂)');
  console.log('  Âø´ÂèñÊ©üÂà∂: ‚úÖ Â∑≤ÂØ¶Áèæ');
  
  console.log('\nüéâ ÁúüÂØ¶Á∂≤Ë∑ØÁà¨Ëü≤Ê∏¨Ë©¶ÂÆåÊàêÔºÅ');
}

// Ê∏¨Ë©¶ÂáΩÊï∏ÂØ¶Áèæ
async function testGDELT() {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 10000);
  
  try {
    const response = await fetch('https://api.gdeltproject.org/api/v2/doc/doc?query=taiwan%20flood&mode=artlist&maxrecords=5&format=json', {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; FloodNewsBot/1.0)',
        'Accept': 'application/json'
      }
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const data = await response.json();
    return data.articles || [];
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}

async function testGovernmentAPI() {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 8000);
  
  try {
    const response = await fetch('https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/O-A0001-001?Authorization=CWB-CBA2C7BA-E0E1-46FF-B9E2-10A67F5BF21E&format=JSON', {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; FloodNewsBot/1.0)',
        'Accept': 'application/json'
      }
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const data = await response.json();
    const stations = data?.cwbopendata?.location || [];
    
    return stations.slice(0, 3).map(station => ({
      title: `${station.locationName} Ê∞£Ë±°ËßÄÊ∏¨Ë≥áÊñô`,
      source: '‰∏≠Â§ÆÊ∞£Ë±°ÁΩ≤'
    }));
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}

async function testGoogleNewsRSS() {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 10000);
  
  try {
    const response = await fetch('https://news.google.com/rss/search?q=Âè∞ÁÅ£%20Ê∑πÊ∞¥&hl=zh-TW&gl=TW&ceid=TW:zh-Hant', {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; FloodNewsBot/1.0)',
        'Accept': 'application/rss+xml, application/xml, text/xml'
      }
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const xmlText = await response.text();
    
    // Á∞°ÂñÆ XML Ëß£Êûê
    const items = [];
    const itemRegex = /<item[^>]*>([\s\S]*?)<\/item>/gi;
    let match;
    
    while ((match = itemRegex.exec(xmlText)) !== null && items.length < 5) {
      const itemContent = match[1];
      const titleMatch = itemContent.match(/<title[^>]*?>(.*?)<\/title>/i);
      
      if (titleMatch) {
        items.push({
          title: titleMatch[1].replace(/<!\[CDATA\[(.*?)\]\]>/gi, '$1').trim(),
          source: 'Google News'
        });
      }
    }
    
    return items;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}

async function testPTTConnectivity() {
  const startTime = Date.now();
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 5000);
  
  try {
    const response = await fetch('https://www.ptt.cc/bbs/Gossiping/index.html', {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; FloodNewsBot/1.0)'
      }
    });
    
    clearTimeout(timeoutId);
    const responseTime = Date.now() - startTime;
    
    return {
      success: response.ok,
      message: response.ok ? 'ÈÄ£Á∑öÊàêÂäü' : `HTTP ${response.status}`,
      responseTime
    };
  } catch (error) {
    clearTimeout(timeoutId);
    const responseTime = Date.now() - startTime;
    
    return {
      success: false,
      message: error.message,
      responseTime
    };
  }
}

async function testDcardAPI() {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 8000);
  
  try {
    const response = await fetch('https://www.dcard.tw/service/api/v2/forums/trending/posts', {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; FloodNewsBot/1.0)',
        'Accept': 'application/json'
      }
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      const data = await response.json();
      return {
        success: true,
        message: 'ÈÄ£Á∑öÊàêÂäü',
        posts: Array.isArray(data) ? data.slice(0, 3) : []
      };
    } else {
      return {
        success: false,
        message: `HTTP ${response.status}`
      };
    }
  } catch (error) {
    clearTimeout(timeoutId);
    return {
      success: false,
      message: error.message
    };
  }
}

async function assessNetworkQuality() {
  const testUrls = [
    'https://www.google.com',
    'https://www.ptt.cc',
    'https://www.dcard.tw',
    'https://api.gdeltproject.org'
  ];
  
  let totalLatency = 0;
  let successCount = 0;
  
  for (const url of testUrls) {
    try {
      const startTime = Date.now();
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3000);
      
      const response = await fetch(url, {
        method: 'HEAD',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        totalLatency += Date.now() - startTime;
        successCount++;
      }
    } catch (error) {
      // ÈÄ£Á∑öÂ§±ÊïóÔºå‰∏çË®àÂÖ•Áµ±Ë®à
    }
  }
  
  const averageLatency = successCount > 0 ? Math.round(totalLatency / successCount) : 0;
  const successRate = Math.round((successCount / testUrls.length) * 100);
  
  let quality = 'Â∑Æ';
  if (successRate >= 75 && averageLatency < 1000) quality = 'ÂÑ™';
  else if (successRate >= 50 && averageLatency < 2000) quality = 'ËâØ';
  else if (successRate >= 25) quality = '‰∏≠';
  
  return {
    averageLatency,
    successRate,
    quality
  };
}

async function quickTest(url, description) {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(url, {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; FloodNewsBot/1.0)'
      }
    });
    
    clearTimeout(timeoutId);
    
    return response.ok ? '‚úÖ ÂèØÈÄ£Á∑ö' : '‚ùå ÈÄ£Á∑öÂ§±Êïó';
  } catch (error) {
    return '‚ùå ÈÄ£Á∑öÂ§±Êïó';
  }
}

// Âü∑Ë°åÊ∏¨Ë©¶
testRealCrawling().catch(console.error);